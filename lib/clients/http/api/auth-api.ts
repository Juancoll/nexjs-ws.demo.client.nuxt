// tslint:disable
/**
 * nexjs-ws.demo-project.server-nestjs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LoginJwtAuthRequest } from '../models';
// @ts-ignore
import { LoginJwtAuthResponse } from '../models';
// @ts-ignore
import { LoginLocalAuthRequest } from '../models';
// @ts-ignore
import { LoginLocalAuthResponse } from '../models';
// @ts-ignore
import { RegisterAuthRequest } from '../models';
// @ts-ignore
import { RegisterAuthResponse } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginJwtAuthRequest} loginJwtAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerJwtLogin: async (loginJwtAuthRequest: LoginJwtAuthRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginJwtAuthRequest' is not null or undefined
            if (loginJwtAuthRequest === null || loginJwtAuthRequest === undefined) {
                throw new RequiredError('loginJwtAuthRequest','Required parameter loginJwtAuthRequest was null or undefined when calling authControllerJwtLogin.');
            }
            const localVarPath = `/api/auth/jwtLogin`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof loginJwtAuthRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginJwtAuthRequest !== undefined ? loginJwtAuthRequest : {}) : (loginJwtAuthRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerJwtMe: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/jwtMe`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginLocalAuthRequest} loginLocalAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLocalLogin: async (loginLocalAuthRequest: LoginLocalAuthRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginLocalAuthRequest' is not null or undefined
            if (loginLocalAuthRequest === null || loginLocalAuthRequest === undefined) {
                throw new RequiredError('loginLocalAuthRequest','Required parameter loginLocalAuthRequest was null or undefined when calling authControllerLocalLogin.');
            }
            const localVarPath = `/api/auth/localLogin`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof loginLocalAuthRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginLocalAuthRequest !== undefined ? loginLocalAuthRequest : {}) : (loginLocalAuthRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLocalLogout: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/localLogout`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLocalMe: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/localMe`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterAuthRequest} registerAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister: async (registerAuthRequest: RegisterAuthRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerAuthRequest' is not null or undefined
            if (registerAuthRequest === null || registerAuthRequest === undefined) {
                throw new RequiredError('registerAuthRequest','Required parameter registerAuthRequest was null or undefined when calling authControllerRegister.');
            }
            const localVarPath = `/api/auth/register`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof registerAuthRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(registerAuthRequest !== undefined ? registerAuthRequest : {}) : (registerAuthRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginJwtAuthRequest} loginJwtAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerJwtLogin(loginJwtAuthRequest: LoginJwtAuthRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginJwtAuthResponse>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authControllerJwtLogin(loginJwtAuthRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerJwtMe(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authControllerJwtMe(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {LoginLocalAuthRequest} loginLocalAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLocalLogin(loginLocalAuthRequest: LoginLocalAuthRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginLocalAuthResponse>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authControllerLocalLogin(loginLocalAuthRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLocalLogout(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authControllerLocalLogout(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLocalMe(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authControllerLocalMe(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {RegisterAuthRequest} registerAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRegister(registerAuthRequest: RegisterAuthRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterAuthResponse>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authControllerRegister(registerAuthRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {LoginJwtAuthRequest} loginJwtAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerJwtLogin(loginJwtAuthRequest: LoginJwtAuthRequest, options?: any): AxiosPromise<LoginJwtAuthResponse> {
            return AuthApiFp(configuration).authControllerJwtLogin(loginJwtAuthRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerJwtMe(options?: any): AxiosPromise<void> {
            return AuthApiFp(configuration).authControllerJwtMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginLocalAuthRequest} loginLocalAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLocalLogin(loginLocalAuthRequest: LoginLocalAuthRequest, options?: any): AxiosPromise<LoginLocalAuthResponse> {
            return AuthApiFp(configuration).authControllerLocalLogin(loginLocalAuthRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLocalLogout(options?: any): AxiosPromise<void> {
            return AuthApiFp(configuration).authControllerLocalLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLocalMe(options?: any): AxiosPromise<void> {
            return AuthApiFp(configuration).authControllerLocalMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterAuthRequest} registerAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister(registerAuthRequest: RegisterAuthRequest, options?: any): AxiosPromise<RegisterAuthResponse> {
            return AuthApiFp(configuration).authControllerRegister(registerAuthRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - interface
 * @export
 * @interface AuthApi
 */
export interface AuthApiInterface {
    /**
     * 
     * @param {LoginJwtAuthRequest} loginJwtAuthRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerJwtLogin(loginJwtAuthRequest: LoginJwtAuthRequest, options?: any): AxiosPromise<LoginJwtAuthResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerJwtMe(options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {LoginLocalAuthRequest} loginLocalAuthRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerLocalLogin(loginLocalAuthRequest: LoginLocalAuthRequest, options?: any): AxiosPromise<LoginLocalAuthResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerLocalLogout(options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerLocalMe(options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {RegisterAuthRequest} registerAuthRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerRegister(registerAuthRequest: RegisterAuthRequest, options?: any): AxiosPromise<RegisterAuthResponse>;

}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI implements AuthApiInterface {
    /**
     * 
     * @param {LoginJwtAuthRequest} loginJwtAuthRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerJwtLogin(loginJwtAuthRequest: LoginJwtAuthRequest, options?: any) {
        return AuthApiFp(this.configuration).authControllerJwtLogin(loginJwtAuthRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerJwtMe(options?: any) {
        return AuthApiFp(this.configuration).authControllerJwtMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginLocalAuthRequest} loginLocalAuthRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLocalLogin(loginLocalAuthRequest: LoginLocalAuthRequest, options?: any) {
        return AuthApiFp(this.configuration).authControllerLocalLogin(loginLocalAuthRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLocalLogout(options?: any) {
        return AuthApiFp(this.configuration).authControllerLocalLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLocalMe(options?: any) {
        return AuthApiFp(this.configuration).authControllerLocalMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterAuthRequest} registerAuthRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerRegister(registerAuthRequest: RegisterAuthRequest, options?: any) {
        return AuthApiFp(this.configuration).authControllerRegister(registerAuthRequest, options).then((request) => request(this.axios, this.basePath));
    }

}
